openapi: 3.0.4
info:
  title: ArtSite
  version: '1.0'
paths:
  /api/arts:
    get:
      tags:
        - Art
      parameters:
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Art'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Art'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Art'
  /api/arts/{artId}:
    get:
      tags:
        - Art
      parameters:
        - name: artId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Art'
            application/json:
              schema:
                $ref: '#/components/schemas/Art'
            text/json:
              schema:
                $ref: '#/components/schemas/Art'
        '404':
          description: Not Found
    delete:
      tags:
        - Art
      parameters:
        - name: artId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '202':
          description: Accepted
        '404':
          description: Not Found
  /api/arts/{artId}/pictures:
    get:
      tags:
        - Art
      parameters:
        - name: artId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Picture'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Picture'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Picture'
        '404':
          description: Not Found
    post:
      tags:
        - Art
      parameters:
        - name: artId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
            encoding:
              files:
                style: form
      responses:
        '201':
          description: Created
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Art'
            application/json:
              schema:
                $ref: '#/components/schemas/Art'
            text/json:
              schema:
                $ref: '#/components/schemas/Art'
        '400':
          description: Bad Request
        '404':
          description: Not Found
  /api/arts/{artId}/comments:
    get:
      tags:
        - Art
      parameters:
        - name: artId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Comment'
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
            text/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '404':
          description: Not Found
    post:
      tags:
        - Art
      parameters:
        - name: artId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddingComment'
          text/json:
            schema:
              $ref: '#/components/schemas/AddingComment'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AddingComment'
      responses:
        '201':
          description: Created
        '404':
          description: Not Found
  /api/artists:
    post:
      tags:
        - Artist
      requestBody:
        content:
          application/json:
            schema:
              type: string
          text/json:
            schema:
              type: string
          application/*+json:
            schema:
              type: string
      responses:
        '200':
          description: OK
  /api/artists/{artistId}:
    get:
      tags:
        - Artist
      parameters:
        - name: artistId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
        '404':
          description: Not Found
  /api/artists/{artistId}/arts:
    get:
      tags:
        - Artist
      parameters:
        - name: artistId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Art'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Art'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Art'
        '404':
          description: Not Found
  /api/artists/{artistId}/messages:
    get:
      tags:
        - Artist
      parameters:
        - name: artistId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '404':
          description: Not Found
    post:
      tags:
        - Artist
      parameters:
        - name: artistId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddingMessage'
          text/json:
            schema:
              $ref: '#/components/schemas/AddingMessage'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AddingMessage'
      responses:
        '201':
          description: Created
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Message'
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
            text/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/artists/{artistId}/tiers:
    get:
      tags:
        - Artist
      parameters:
        - name: artistId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tier'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tier'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tier'
        '404':
          description: Not Found
    post:
      tags:
        - Artist
      parameters:
        - name: artistId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddingTier'
          text/json:
            schema:
              $ref: '#/components/schemas/AddingTier'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AddingTier'
      responses:
        '201':
          description: Created
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Message'
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
            text/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/comments/{commentId}:
    get:
      tags:
        - Comment
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Comment'
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
            text/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '404':
          description: Not Found
    delete:
      tags:
        - Comment
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '202':
          description: Accepted
        '404':
          description: Not Found
  /api/messages:
    get:
      tags:
        - Message
      parameters:
        - name: onlyLast
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Message'
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
            text/json:
              schema:
                $ref: '#/components/schemas/Message'
  /api/messages/{messageId}:
    get:
      tags:
        - Message
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Message'
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
            text/json:
              schema:
                $ref: '#/components/schemas/Message'
        '404':
          description: Not Found
    delete:
      tags:
        - Message
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '202':
          description: Accepted
        '404':
          description: Not Found
  /api/tiers/{tierId}:
    get:
      tags:
        - Tier
      parameters:
        - name: tierId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Tier'
            application/json:
              schema:
                $ref: '#/components/schemas/Tier'
            text/json:
              schema:
                $ref: '#/components/schemas/Tier'
        '404':
          description: Not Found
    delete:
      tags:
        - Tier
      parameters:
        - name: tierId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '202':
          description: Accepted
        '404':
          description: Not Found
  /api/user:
    post:
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
          text/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
      responses:
        '200':
          description: OK
  /api/user/authorizations:
    post:
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
          text/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: OK
  /api/user/me:
    get:
      tags:
        - User
      responses:
        '200':
          description: OK
components:
  schemas:
    AddingComment:
      required:
        - text
      type: object
      properties:
        text:
          type: string
          nullable: true
      additionalProperties: false
    AddingMessage:
      required:
        - text
      type: object
      properties:
        text:
          type: string
          nullable: true
      additionalProperties: false
    AddingTier:
      required:
        - name
      type: object
      properties:
        extends:
          type: integer
          format: int32
          nullable: true
        name:
          type: string
          nullable: true
      additionalProperties: false
    Art:
      type: object
      properties:
        id:
          type: integer
          format: int32
        description:
          type: string
          nullable: true
        uploadedAt:
          type: string
          format: date-time
        artistId:
          type: integer
          format: int32
        tierId:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    Artist:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
      additionalProperties: false
    Comment:
      required:
        - text
        - userId
      type: object
      properties:
        id:
          type: integer
          format: int32
        userId:
          type: string
          nullable: true
        artId:
          type: integer
          format: int32
        text:
          type: string
          nullable: true
        uploadedAt:
          type: string
          format: date-time
      additionalProperties: false
    LoginDto:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
      additionalProperties: false
    Message:
      required:
        - fromUserId
        - text
      type: object
      properties:
        id:
          type: integer
          format: int32
        fromUserId:
          type: string
          nullable: true
        artistId:
          type: integer
          format: int32
        text:
          type: string
          nullable: true
      additionalProperties: false
    Picture:
      required:
        - url
      type: object
      properties:
        id:
          type: integer
          format: int32
        artId:
          type: integer
          format: int32
        url:
          type: string
          nullable: true
      additionalProperties: false
    RegisterDto:
      required:
        - email
        - password
      type: object
      properties:
        email:
          minLength: 1
          type: string
          format: email
        password:
          minLength: 1
          type: string
          format: password
      additionalProperties: false
    Tier:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int32
        artistId:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        extends:
          type: integer
          format: int32
      additionalProperties: false
  securitySchemes:
    Bearer:
      type: apiKey
      description: Please insert JWT with Bearer into field
      name: Authorization
      in: header
security:
  - Bearer: []
